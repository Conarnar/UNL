task ReplayMenu() {
	let objSubMenuTitle = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objSubMenuTitle, imgDirectory ~ "title/submenutitle.png");
	ObjSprite2D_SetSourceRect(objSubMenuTitle, 0, 2048, 1024, 2560);
	ObjSprite2D_SetDestRect(objSubMenuTitle, -128, -128, 128, 0);
	Obj_SetRenderPriority(objSubMenuTitle, 0.04);
	ObjRender_SetPosition(objSubMenuTitle, 320, 150, 0);

	LoadReplayList();
	let replayIndices = GetValidReplayIndices();

	let selectIndex = 0;
	let close = false;

	task ReplayChoice(index) {
		let replayIndex = replayIndices[index];
		let text = rtos("00", replayIndex) ~ " ";
		text = text ~ vtos("-8s", GetReplayInfo(replayIndex, REPLAY_USER_NAME)) ~ " ";
		text = text ~ GetReplayInfo(replayIndex, REPLAY_DATE_TIME) ~ " ";
		text = text ~ vtos("-4s", GetReplayInfo(replayIndex, REPLAY_COMMENT)) ~ " ";
		text = text ~ vtos("3.2f", GetReplayInfo(replayIndex, REPLAY_FPS_AVERAGE)) ~ "fps";

		let obj = ObjText_Create;
		ObjText_SetText(obj, text);
		ObjText_SetFontSize(obj, 18);
		ObjText_SetFontBold(obj, true);
		ObjText_SetFontColorTop(obj, 255, 255, 255);
		ObjText_SetFontColorBottom(obj, 100, 100, 100);
		ObjText_SetFontBorderWidth(obj, 1);
		ObjText_SetFontBorderType(obj, BORDER_FULL);
		ObjText_SetFontBorderColor(obj, 0, 0, 0);
		Obj_SetRenderPriority(obj, 0.03);
		ObjRender_SetX(obj, 80);

		let frame = 0;
		let targetY = 0;
		let alpha = 0;

		while(!close) {
			if (selectIndex == index && frame > 30) {
				ObjRender_SetColor(obj, 255, 255, 100);
			} else {
				ObjRender_SetColor(obj, 255, 255, 255);
			}

			if (absolute(selectIndex * 20 - targetY) > 30) {
				if (targetY < selectIndex * 20) {
					targetY += 45;
				} else if (targetY > selectIndex * 20) {
					targetY -= 45;
				}
			}

			if (targetY < selectIndex * 20) {
				targetY += 5;
			} else if (targetY > selectIndex * 20) {
				targetY -= 5;
			}

			let y = 148 + index * 20 - targetY;
			alpha = 255 * min((y + ObjText_GetTotalHeight(obj))/60, min((480 - y)/60, 1)) * min(frame/30, 1);

			ObjRender_SetY(obj, y);
			ObjRender_SetAlpha(obj, alpha);

			frame++;
			yield;
		}

		descent(a in 0 .. 30) {
			ObjRender_SetX(obj, a * 10 - 220);
			ObjRender_SetAlpha(obj, alpha * a/30);
			yield;
		}

		Obj_Delete(obj);
	}

	let replayCount = length(replayIndices);
	ascent(a in 0 .. replayCount) {
		ReplayChoice(a);
	}

	ascent(a in 0 .. 15) {
		ObjRender_SetAlpha(objSubMenuTitle, 255 * a/15);
		yield;
	}

	ObjRender_SetAlpha(objSubMenuTitle, 255);

	let frameKeyHold = 0;

	loop {
		if (GetVirtualKeyState(VK_OK) == KEY_PUSH) {
			StartGame(true, replayIndices[selectIndex]);
			PlaySound(SE_CURSOR1);
			break;
		}

		if (GetVirtualKeyState(VK_UP) == KEY_PUSH) {
			PlaySound(SE_CURSOR0);
			selectIndex--;
		} else if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH) {
			PlaySound(SE_CURSOR0);
			selectIndex++;
		} else if(GetVirtualKeyState(VK_UP) == KEY_HOLD) {
			frameKeyHold++;
			if(frameKeyHold == 20 || (frameKeyHold > 20 && (frameKeyHold % 4 == 0))) {
				PlaySound(SE_CURSOR0);
				selectIndex--;
			}
		} else if(GetVirtualKeyState(VK_DOWN) == KEY_HOLD) {
			frameKeyHold++;
			if(frameKeyHold == 20 || (frameKeyHold > 20 && (frameKeyHold % 4 == 0))) {
				PlaySound(SE_CURSOR0);
				selectIndex++;
			}
		} else {
			frameKeyHold = 0;
		}

		if (selectIndex < 0) {
			selectIndex = replayCount - 1;
		} else {
			selectIndex %= replayCount;
		}

		if (GetVirtualKeyState(VK_CANCEL) == KEY_PUSH) {
			PlaySound(SE_CURSOR2);
			Main(3, true);
			break;
		}

		yield;
	}

	close = true;

	descent(a in 0 .. 15) {
		ObjRender_SetAlpha(objSubMenuTitle, 255 * a/15);
		ObjRender_SetY(objSubMenuTitle, a * 10);
		yield;
	}

	Obj_Delete(objSubMenuTitle);
}