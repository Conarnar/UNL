task OptionsMenu() {
	let objSubMenuTitle = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objSubMenuTitle, imgDirectory ~ "title/submenutitle.png");
	ObjSprite2D_SetSourceRect(objSubMenuTitle, 0, 1024, 1024, 1536);
	ObjSprite2D_SetDestRect(objSubMenuTitle, -128, -128, 128, 0);
	Obj_SetRenderPriority(objSubMenuTitle, 0.04);
	ObjRender_SetPosition(objSubMenuTitle, 320, 150, 0);

	let selectIndex = 0;
	let close = false;

	ascent(a in 0 .. 15) {
		ObjRender_SetAlpha(objSubMenuTitle, 255 * a/15);
		yield;
	}

	ObjRender_SetAlpha(objSubMenuTitle, 255);

	task OptionChoice(text, index) {
		let obj = ObjText_Create;
		ObjText_SetText(obj, text);
		ObjText_SetFontSize(obj, 28);
		ObjText_SetFontBold(obj, true);
		ObjText_SetFontColorTop(obj, 255, 255, 255);
		ObjText_SetFontColorBottom(obj, 100, 100, 100);
		ObjText_SetFontType(obj, "MonoSpatial");
		ObjText_SetFontBorderWidth(obj, 1);
		ObjText_SetFontBorderType(obj, BORDER_FULL);
		ObjText_SetFontBorderColor(obj, 0, 0, 0);
		Obj_SetRenderPriority(obj, 0.03);
		ObjRender_SetPosition(obj, 64, 148 + index * 30, 0);

		let frame = 0;

		while(!close) {
			if (selectIndex == index && frame > 30) {
				ObjRender_SetColor(obj, 255, 255, 100);
			} else {
				ObjRender_SetColor(obj, 255, 255, 255);
			}

			ObjRender_SetAlpha(obj, 255 * frame/30);

			frame++;
			yield;
		}

		descent(a in 0 .. 30) {
			ObjRender_SetAlpha(obj, 255 * a/30);
			yield;
		}

		Obj_Delete(obj);
	}

	let optionList = ["Sound Volume", "BGM Volume", "Background Drawing", "Aura Effects", "Player Effects", "Bullet Delete Effects", "Other Effects", "Reset to default"];
	
	let optionChoiceResult = [
		["0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%"],
		["0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%"],
		["On", "Off"],
		["On", "Off"],
		["On", "Off"],
		["On", "Off"],
		["On", "Off"]
		];

	let defaultOptionChoice = [10, 10, 0, 0, 0, 0, 0];

	let optionChoiceIndex = [];
	
	let optionLength = length(optionList);
	let optionChoiceLength = length(optionChoiceResult);

	task OptionResult(choices, index) {
		let obj = ObjText_Create;
		ObjText_SetFontSize(obj, 28);
		ObjText_SetFontBold(obj, true);
		ObjText_SetFontColorTop(obj, 255, 255, 255);
		ObjText_SetFontColorBottom(obj, 100, 100, 100);
		ObjText_SetFontType(obj, "MonoSpatial");
		ObjText_SetFontBorderWidth(obj, 1);
		ObjText_SetFontBorderType(obj, BORDER_FULL);
		ObjText_SetFontBorderColor(obj, 0, 0, 0);
		Obj_SetRenderPriority(obj, 0.03);
		ObjRender_SetPosition(obj, 384, 148 + index * 30, 0);

		let a = 0;

		while(!close) {
			if (selectIndex == index && a > 30) {
				ObjRender_SetColor(obj, 255, 255, 100);
			} else {
				ObjRender_SetColor(obj, 255, 255, 255);
			}

			ObjRender_SetAlpha(obj, 255 * a/30);

			ObjText_SetText(obj, choices[optionChoiceIndex[index]]);
			
			a++;
			yield;
		}

		descent(a in 0 .. 30) {
			ObjRender_SetAlpha(obj, 255 * a/30);
			yield;
		}

		Obj_Delete(obj);
	}

	ascent(a in 0 .. optionLength) {
		OptionChoice(optionList[a], a);
	}

	ascent(a in 0 .. optionChoiceLength) {
		optionChoiceIndex = optionChoiceIndex ~ [GetAreaCommonData("Options", optionList[a], defaultOptionChoice[a])];
		OptionResult(optionChoiceResult[a], a);
	}

	let frameKeyHold = 0;
	let frameKeyHold2 = 0;

	loop {
		let soundPlay = false;

		if (GetVirtualKeyState(VK_UP) == KEY_PUSH) {
			soundPlay = true;
			frameKeyHold2 = 0;
			selectIndex--;
		} else if(GetVirtualKeyState(VK_DOWN) == KEY_PUSH) {
			soundPlay = true;
			frameKeyHold2 = 0;
			selectIndex++;
		} else if(GetVirtualKeyState(VK_UP) == KEY_HOLD) {
			frameKeyHold++;
			frameKeyHold2 = 0;
			if(frameKeyHold == 20 || (frameKeyHold > 20 && (frameKeyHold % 4 == 0))) {
				soundPlay = true;
				selectIndex--;
			}
		} else if(GetVirtualKeyState(VK_DOWN) == KEY_HOLD) {
			frameKeyHold++;
			frameKeyHold2 = 0;
			if(frameKeyHold == 20 || (frameKeyHold > 20 && (frameKeyHold % 4 == 0))) {
				soundPlay = true;
				selectIndex++;
			}
		} else {
			frameKeyHold = 0;
		}

		if (selectIndex < 0) {
			selectIndex = optionLength - 1;
		} else {
			selectIndex %= optionLength;
		}

		if (selectIndex < optionChoiceLength) {
			if (GetVirtualKeyState(VK_LEFT) == KEY_PUSH) {
				soundPlay = true;
				frameKeyHold = 0;
				optionChoiceIndex[selectIndex] = optionChoiceIndex[selectIndex] - 1;
			} else if(GetVirtualKeyState(VK_RIGHT) == KEY_PUSH) {
				soundPlay = true;
				frameKeyHold = 0;
				optionChoiceIndex[selectIndex] = optionChoiceIndex[selectIndex] + 1;
			} else if(GetVirtualKeyState(VK_LEFT) == KEY_HOLD) {
				frameKeyHold2++;
				frameKeyHold = 0;
				if(frameKeyHold2 == 20 || (frameKeyHold2 > 20 && (frameKeyHold2 % 4 == 0))) {
					soundPlay = true;
					optionChoiceIndex[selectIndex] = optionChoiceIndex[selectIndex] - 1;
				}
			} else if(GetVirtualKeyState(VK_RIGHT) == KEY_HOLD) {
				frameKeyHold2++;
				frameKeyHold = 0;
				if(frameKeyHold2 == 20 || (frameKeyHold2 > 20 && (frameKeyHold2 % 4 == 0))) {
					soundPlay = true;
					optionChoiceIndex[selectIndex] = optionChoiceIndex[selectIndex] + 1;
				}
			} else {
				frameKeyHold2 = 0;
			}

			if (optionChoiceIndex[selectIndex] < 0) {
				optionChoiceIndex[selectIndex] = length(optionChoiceResult[selectIndex]) - 1;
			} else {
				optionChoiceIndex[selectIndex] = optionChoiceIndex[selectIndex] % length(optionChoiceResult[selectIndex]);
			}
		} else {
			if (GetVirtualKeyState(VK_OK) == KEY_PUSH) {
				soundPlay = true;
				optionChoiceIndex = defaultOptionChoice;

				ascent(a in 0 .. optionChoiceLength) {
					SetAreaCommonData("Options", optionList[a], optionChoiceIndex[a]);
				}
			}
		}

		if (selectIndex < optionChoiceLength) {
			SetAreaCommonData("Options", optionList[selectIndex], optionChoiceIndex[selectIndex]);
		}

		if (soundPlay) {
			StopBGM(0);
			PlaySound(SE_CURSOR0);
		}

		if (GetVirtualKeyState(VK_CANCEL) == KEY_PUSH) {
			SaveCommonDataAreaA2("Options", saveDataDirectory ~ "options.dat");
			PlaySound(SE_CURSOR2);
			Main(3, true);
			break;
		}

		yield;
	}

	close = true;

	descent(a in 0 .. 15) {
		ObjRender_SetAlpha(objSubMenuTitle, 255 * a/15);
		ObjRender_SetY(objSubMenuTitle, a * 10);
		yield;
	}

	Obj_Delete(objSubMenuTitle);
}